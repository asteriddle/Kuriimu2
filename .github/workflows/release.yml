name: Kuriimu2 Release

on:
  push:
    branches:
      - master

jobs:
  build:
    
    #timeout-minutes: 15

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - uses: nuget/setup-nuget@v1

   # Setup the build
    - name: Wait for other release builds
      uses: softprops/turnstyle@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.302

    - name: Setup NuGet sources
      run: |
        nuget sources add -name LocalFeed -source D:\a\Kuriimu2\Kuriimu2\nuget -verbosity detailed
        nuget sources add -name EtoFeed -source https://www.myget.org/F/eto/api/v3/index.json -verbosity detailed

    # Setup release version manifests
    - name: Get manifest version
      id: set_version
      uses: notiz-dev/github-action-json-property@release
      with: 
        path: './version.json'
        prop_path: 'version'

    - name: Create manifests
      run: |
        mkdir ./update/Eto/Wpf
        mkdir ./update/Eto/Gtk
        mkdir ./update/Eto/Mac
        mkdir ./update/Cmd/Windows
        mkdir ./update/Cmd/Linux
        mkdir ./update/Cmd/Mac
        echo '{"source_type": "Github Action", "version": "${{ steps.set_version.outputs.prop }}", "build_number": "${{ github.run_id }}", "application_name": "Kuriimu2.exe" }' > ./update/Eto/Wpf/manifest.json
        echo '{"source_type": "Github Action", "version": "${{ steps.set_version.outputs.prop }}", "build_number": "${{ github.run_id }}", "application_name": "Kuriimu2" }' > ./update/Eto/Gtk/manifest.json
        echo '{"source_type": "Github Action", "version": "${{ steps.set_version.outputs.prop }}", "build_number": "${{ github.run_id }}", "application_name": "Kuriimu2.app" }' > ./update/Eto/Mac/manifest.json
        echo '{"source_type": "Github Action", "version": "${{ steps.set_version.outputs.prop }}", "build_number": "${{ github.run_id }}", "application_name": "Kuriimu2.exe" }' > ./update/Cmd/Windows/manifest.json
        echo '{"source_type": "Github Action", "version": "${{ steps.set_version.outputs.prop }}", "build_number": "${{ github.run_id }}", "application_name": "Kuriimu2" }' > ./update/Cmd/Linux/manifest.json
        echo '{"source_type": "Github Action", "version": "${{ steps.set_version.outputs.prop }}", "build_number": "${{ github.run_id }}", "application_name": "Kuriimu2" }' > ./update/Cmd/Mac/manifest.json
        echo '{"source_type": "Github Action", "version": "${{ steps.set_version.outputs.prop }}", "build_number": ${{ github.run_id }} }' > ./src/Kuriimu2.EtoForms/Kuriimu2.EtoForms/Resources/version.json
        echo '{"source_type": "Github Action", "version": "${{ steps.set_version.outputs.prop }}", "build_number": ${{ github.run_id }} }' > ./src/Kuriimu2.Cmd/Resources/version.json

    # Publish applications
    - name: Publish EtoForms for Windows
      run: |
        dotnet publish ./src/Kuriimu2.EtoForms/Kuriimu2.EtoForms.Wpf/Kuriimu2.EtoForms.Wpf.csproj --output ./dist/final/Eto/Wpf --configuration Release --framework netcoreapp31 --runtime win-x64 /p:PublishSingleFile=true
        mv ./dist/final/Eto/Wpf/Kuriimu2.EtoForms.Wpf.exe ./dist/final/Eto/Wpf/Kuriimu2.exe
        rm ./dist/final/Eto/Wpf/*.pdb

    - name: Publish CommandLine for Windows
      run: |
        dotnet publish ./src/Kuriimu2.Cmd/Kuriimu2.Cmd.csproj --output ./dist/final/Cmd/Windows --configuration Release --framework netcoreapp31 --runtime win-x64 /p:PublishSingleFile=true
        mv ./dist/final/Cmd/Windows/Kuriimu2.Cmd.exe ./dist/final/Cmd/Windows/Kuriimu2.exe
        rm ./dist/final/Cmd/Windows/*.pdb

    # Publish libraries as nuget packages
    - name: Pack libraries
      run: |
        dotnet build ./src/Kontract/Kontract.csproj --configuration Release
        dotnet build ./src/Komponent/Komponent.csproj --configuration Release
        dotnet build ./src/Kanvas/Kanvas.csproj --configuration Release
        dotnet build ./src/Kompression/Kompression.csproj --configuration Release
        dotnet build ./src/Kryptography/Kryptography.csproj --configuration Release
        dotnet pack ./src/Kontract/Kontract.csproj --configuration Release --verbosity normal
        dotnet pack ./src/Komponent/Komponent.csproj --configuration Release --verbosity normal
        dotnet pack ./src/Kanvas/Kanvas.csproj --configuration Release --verbosity normal
        dotnet pack ./src/Kompression/Kompression.csproj --configuration Release --verbosity normal
        dotnet pack ./src/Kryptography/Kryptography.csproj --configuration Release --verbosity normal

    # Publish plugins
    - name: Publish plugins
      run: |
        dotnet build ./plugins/ArcSystemWorks/ArcSystemWorks.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/Atlus/Atlus.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/BandaiNamco/BandaiNamco.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/Capcom/Capcom.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/Circus/Circus.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/Criware/Criware.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/DotEmu/DotEmu.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/DreamCatcher/DreamCatcher.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/Felistella/Felistella.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/FurYu/FurYu.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/HeadstrongGames/HeadstrongGames.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/HuneX/HuneX.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/IntiCreates/IntiCreates.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/Kadokawa/Kadokawa.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/KhronosGroup/KhronosGroup.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/KoeiTecmo/KoeiTecmo.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/Konami/Konami.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/Level5/Level5.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/MercurySteam/MercurySteam.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/MostWantedEntertainment/MostWantedEntertainment.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/Nintendo/Nintendo.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/NipponIchiSoftware/NipponIchiSoftware.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/Primula/Primula.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/Sega/Sega.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/Shade/Shade.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/Sony/Sony.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/SpikeChunsoft/SpikeChunsoft.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/SquareEnix/SquareEnix.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/StingEntertainment/StingEntertainment.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/SuperflatGames/SuperflatGames.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/TamSoft/TamSoft.sln --output ./dist/final/plugins --configuration Release
        dotnet build ./plugins/VBlankEntertainment/VBlankEntertainment.sln --output ./dist/final/plugins --configuration Release
        rm ./dist/final/plugins/*.pdb
        rm ./dist/final/plugins/*.deps.json

    - name: Copy plugins to applications
      run: |
        xcopy /I .\dist\final\plugins .\dist\final\Eto\Wpf\plugins
        xcopy /I .\dist\final\plugins .\dist\final\Cmd\Windows\plugins
      shell: cmd

    # Prepare release archives
    - name: Zip EtoForms Windows release
      uses: vimtor/action-zip@v1
      with:
        files: ./dist/final/Eto/Wpf
        dest: ./update/Eto/Wpf/latest.zip

    - name: Zip Cmd Windows release
      uses: vimtor/action-zip@v1
      with:
        files: ./dist/final/Cmd/Windows
        dest: ./update/Cmd/Windows/latest.zip

    # Sign release packages
    - name: Install openSSL
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: install openssl.light
      
    - name: Sign releases
      run: |
        echo "$PRIVATE_KEY_CMD" > cmd.pem
        echo "$PRIVATE_KEY_ETOFORMS" > etoforms.pem
        openssl dgst -sha512 -sign etoforms.pem -out ./update/Eto/Wpf/latest.sig ./update/Eto/Wpf/latest.zip
        openssl dgst -sha512 -sign cmd.pem -out ./update/Cmd/Windows/latest.sig ./update/Cmd/Windows/latest.zip
      shell: bash
      env:
        PRIVATE_KEY_CMD: ${{secrets.PRIVATE_KEY_CMD}}
        PRIVATE_KEY_ETOFORMS: ${{secrets.PRIVATE_KEY_ETOFORMS}}
      
    # Upload releases to update repositories
    - name: Clone update repositories
      run: |
        git clone https://github.com/FanTranslatorsInternational/Kuriimu2-EtoForms-Update ./update_eto_repo
        git clone https://github.com/FanTranslatorsInternational/Kuriimu2-CommandLine-Update ./update_cmd_repo
        
    - name: Move update files to update repos
      run: |
        mv -Force ./update/Eto/Wpf/* ./update_eto_repo/Wpf
        mv -Force ./update/Cmd/Windows/* ./update_cmd_repo/Windows
        
    - name: Commit releases to EtoForms update repository
      run: |
        cd ./update_eto_repo
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add *
        git commit -m "Update binaries" -a

    - name: Commit release to CommandLine update repository
      run: |
        cd ./update_cmd_repo
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add *
        git commit -m "Update binaries" -a
        
    - name: Push releases to EtoForms update repo
      uses: ad-m/github-push-action@master
      with:
        directory: ./update_eto_repo
        repository: FanTranslatorsInternational/Kuriimu2-EtoForms-Update
        github_token: ${{ secrets.PRIVATE_ACCESS_TOKEN }}

    - name: Push release to CommandLine update repo
      uses: ad-m/github-push-action@master
      with:
        directory: ./update_cmd_repo
        repository: FanTranslatorsInternational/Kuriimu2-CommandLine-Update
        github_token: ${{ secrets.PRIVATE_ACCESS_TOKEN }}
    
    # Create github release for EtoForms
    - name: Rename releases
      run: |
        mv ./update_eto_repo/Wpf/latest.zip ./update_eto_repo/Wpf/Kuriimu2_v${{ steps.set_version.outputs.prop }}_gui_win.zip
        mv ./update_cmd_repo/Windows/latest.zip ./update_cmd_repo/Windows/Kuriimu2_v${{ steps.set_version.outputs.prop }}_cmd_win.zip

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.set_version.outputs.prop }}
        draft: false
        prerelease: false
        body_path: changelog.txt
        tag_name: ${{ steps.set_version.outputs.prop }}
        files: |
          update_eto_repo/Wpf/Kuriimu2_v${{ steps.set_version.outputs.prop }}_gui_win.zip
          update_cmd_repo/Windows/Kuriimu2_v${{ steps.set_version.outputs.prop }}_cmd_win.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}